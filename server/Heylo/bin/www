#!/usr/bin/env node

/**
 * Module dependencies.
 */

if (process.env.production) {
  require('dotenv').config({ path: 'config/production/.env' });
} else {
  require('dotenv').config({ path: 'config/development/.env' });
}
let app = require('../app');
let debug = require('debug')('heylo:server');
let https = require('https');
let fs = require('fs');
let websocketServer = require('websocket').server;

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '4343');
app.set('port', port);


let credentials = {
  key: fs.readFileSync('sslcert/cert.key'),
  cert: fs.readFileSync('sslcert/cert.pem')
};


/**
 * Create HTTPS server.
 */

let server = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Create websocket for chat
 */
let connections = [];

let wsChat = new websocketServer({ httpServer: server });
wsChat.on('request', function(request) {
  let connection = request.accept(null, request.origin);
  let connectionIndex = connections.push(connection) - 1;
  console.log((new Date()) + ' Connection accepted.');

  // user sent some message
  connection.on('message', function(message) {
    if (message.type === 'utf8') { // accept only text
      // first message sent by user is their name
      // we want to keep history of all sent messages
      let obj = {
        time: (new Date()).getTime(),
        text: message.utf8Data
      };
      // broadcast message to all connected clients
      let json = JSON.stringify({ type:'message', data: obj });
      connections.forEach(function (clientConnection) {
        clientConnection.sendUTF(json);
      });
    }
  });

  connection.on('close', function(connection) {
    console.log((new Date()) + " Peer disconnected.");
    connections.splice(connectionIndex, 1);
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTPS server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTPS server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
